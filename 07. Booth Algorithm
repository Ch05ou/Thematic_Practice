module BoothAlgorithm(clk,rst,in1,in2,out);

input clk,rst;
input [5:0]in1,in2;
reg [12:0]P;
reg [2:0]sign;
integer counter,clkc;
output reg[11:0]out;

always@(posedge clk)
	begin
	clkc=clkc+1;
		if(rst==1)
			begin
				out=0;
				P=0;
				counter=0;
				clkc=0;
			end
		else
			begin
				if(clkc==12)
					begin
						out=P[12:1];
						clkc=0;
					end
				for(counter=0;counter<7;counter=counter+1)
					begin
						if(counter==0)
							begin
								P=0;
								P[6:1]=in2;
							end
						else if(P[1:0]==2'b01)
							begin 
								P[12:7]=P[12:7]+in1;
								if(in1[5]==1)
									begin
										P=P>>1;
										P[12]=1;
									end
								else
									begin P=P>>1; end	
							end
						else if(P[1:0]==2'b10)
							begin
								P[12:7]=P[12:7]-in1;
								if(in1[5]==0)
									begin
										P=P>>1;
										P[12]=1;
									end
								else
									begin P=P>>1; end
							end
						else if(in1==0 || in2==0)
							begin
								P=0;
							end
						else
							begin
								if(P[12]==1)
									begin
										P=P>>1;
										P[12]=1;
									end
								else
									begin P=P>>1; end
							end
					end

			end
	end

endmodule
